apiVersion: v1
kind: BuildConfig
metadata:
  labels:
    build: {{ pipeline_buildconfig_name }}
  name: {{ pipeline_buildconfig_name }}
  annotations:
spec:
  runPolicy: Serial
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        def git_repo = "{{ service_git_repo }}"
        def git_branch = "{{ service_git_branch }}"
        def version = ""
        def groupId = ""
        def artifactId = ""
        def commitId = ""
        def namespace_jenkins = "{{ namespace_tools }}"
        def namespace_app = "{{ namespace }}"
        def app_build = "{{ buildconfig_name }}"
        def app_imagestream = "{{ imagestream_name }}"
        def app_name = "{{ application_name }}"

        node ('maven-with-nexus') {
          stage ('Compile') {
            echo "Starting build"
            git url: "${git_repo}", branch: "${git_branch}"
            dir("${app_name}") {
              def pom = readMavenPom file: 'pom.xml'
              version = pom.version
              groupId = pom.groupId
              artifactId = pom.artifactId
              def commitIdFull = sh( script: 'git rev-parse HEAD', returnStdout: true )
              commitId = commitIdFull[0..8]
              echo "Building version ${version}, commitId ${commitId}"
              sh "mvn clean compile "
            }
          }

          stage ('Unit Tests') {
            dir("${app_name}") {
              sh "mvn test"
            }
          }

          stage ('Build Application') {
            dir("${app_name}") {
              sh "mvn package -DskipTests=true"
            }
          }

          stage ('Maven Integration Tests') {
            dir("${app_name}") {
              sh "mvn integration-test -DskipUTs=true"
            }
          }

          stage ('Build Image & Trigger Deploy') {
            dir("${app_name}") { 
              openshift.withCluster() {
                openshift.withProject( "${namespace_app}") {
                  def bc = openshift.selector("bc", "${app_build}")
                  def builds = bc.startBuild("--from-file=target/${artifactId}-${version}.jar")
                  timeout (15) {
                    builds.watch {
                      if ( it.count() == 0 ) {
                        return false
                      }
                      echo "Detected new builds created by buildconfig: ${it.names()}"
                      return true
                    }
                    while (builds.object().status.phase != "Complete") {
                      echo "${builds.names()} ;  status = ${builds.object().status.phase}"
                      sleep 5
                    }
                  }
                }
              }
            }
          }
        }
    type: JenkinsPipeline
  triggers:
  - github:
      secret: {{ github_secret }}
    type: GitHub
  - generic:
      secret: {{ generic_secret }}
    type: Generic
